{"/home/travis/build/npmtest/node-npmtest-ember-component-css/test.js":"/* istanbul instrument in package npmtest_ember_component_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/lib.npmtest_ember_component_css.js":"/* istanbul instrument in package npmtest_ember_component_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_component_css = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_component_css = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-component-css && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_component_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_component_css\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_component_css.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_ember_component_css.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_component_css.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_ember_component_css.__dirname +\n                    '/lib.npmtest_ember_component_css.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/node_modules/ember-component-css/index.js":"/* eslint-env node */\n'use strict';\n\nvar Funnel = require('broccoli-funnel');\nvar Merge = require('broccoli-merge-trees');\nvar ProcessStyles = require('./lib/pod-style.js');\nvar ExtractNames = require('./lib/pod-names.js');\nvar StyleManifest = require('broccoli-style-manifest');\n\nmodule.exports = {\n\n  _getStyleFunnel: function() {\n    return new Merge([this._getPodStyleFunnel(), this._getClassicStyleFunnel()], {\n      annotation: 'Merge (ember-component-css merge pod and classic styles)'\n    });\n  },\n\n  _getPodStyleFunnel: function() {\n    return new Funnel(this.projectRoot, {\n      srcDir: this._podDirectory(),\n      exclude: ['styles/**/*'],\n      include: ['**/*.{' + this.allowedStyleExtensions + ',}'],\n      allowEmpty: true,\n      annotation: 'Funnel (ember-component-css grab files)'\n    });\n  },\n\n  _getClassicStyleFunnel: function() {\n    return new Funnel(this.projectRoot, {\n      include: ['styles/' + this.classicStyleDir + '/**/*.{' + this.allowedStyleExtensions + ',}'],\n      allowEmpty: true,\n      annotation: 'Funnel (ember-component-css grab classic files)'\n    });\n  },\n\n  _podDirectory: function() {\n    return this.appConfig.podModulePrefix && !this._isAddon() ? this.appConfig.podModulePrefix.replace(this.appConfig.modulePrefix, '') : '';\n  },\n\n  _namespacingIsEnabled: function() {\n    return this.addonConfig.namespacing !== false;\n  },\n\n  _isAddon: function() {\n    return Boolean(this.parent.parent);\n  },\n\n  _allPodStyles: [],\n\n  _projectRoot: function(trees) {\n    var projectRoot;\n    if (this._isAddon()) {\n      projectRoot = this.parent.root + '/addon';\n    } else if (trees && trees.app) {\n      projectRoot = trees.app;\n    } else {\n      projectRoot = this.parent.root + '/app';\n    }\n\n    return projectRoot;\n  },\n\n  included: function(app) {\n    this._super.included.apply(this, arguments);\n\n    this.projectRoot = this._projectRoot(app.trees);\n\n    if (this._isAddon()) {\n      this.parent.treeForMethods['addon-styles'] = 'treeForParentAddonStyles';\n      this.parent.treeForParentAddonStyles = this.treeForParentAddonStyles.bind(this);\n    }\n\n    this.appConfig = app.project.config(app.env);\n    this.addonConfig = this.appConfig['ember-component-css'] || {};\n    this.classicStyleDir = this.addonConfig.classicStyleDir || 'component-styles';\n    this.terseClassNames = Boolean(this.addonConfig.terseClassNames);\n    this.allowedStyleExtensions = app.registry.extensionsForType('css').filter(Boolean);\n  },\n\n  config: function(enviroment) {\n    var config = {\n      \"ember-component-css\": {\n        terseClassNames: false,\n      },\n    };\n    if (enviroment === 'production') {\n      config[\"ember-component-css\"].terseClassNames = true;\n    }\n    return config;\n  },\n\n  treeForAddon: function(tree) {\n    if (this._namespacingIsEnabled()) {\n      var allPodStyles = new Merge(this._allPodStyles, {\n        overwrite: true, // there are times (specifically with ember engines) where we run over the tree for twice. Should revist and find a way to prevent that in the future.\n        annotation: 'Merge (ember-component-css merge all process styles for a complete list of styles)'\n      });\n\n      var podNames = new ExtractNames(allPodStyles, {\n        classicStyleDir: this.classicStyleDir,\n        terseClassNames: this.terseClassNames,\n        annotation: 'Walk (ember-component-css extract class names from style paths)'\n      });\n\n      tree = new Merge([tree, podNames], {\n        overwrite: true,\n        annotation: 'Merge (ember-component-css merge names with addon tree)'\n      });\n    }\n\n    return this._super.treeForAddon.call(this, tree);\n  },\n\n  treeForParentAddonStyles: function(tree) {\n    return this.processComponentStyles(tree);\n  },\n\n  treeForStyles: function(tree) {\n    if (!this._isAddon()) {\n      tree = this.processComponentStyles(tree);\n    }\n    return this._super.treeForStyles.call(this, tree);\n  },\n\n  processComponentStyles: function(tree) {\n    var podStyles = this._getStyleFunnel();\n    this._allPodStyles.push(podStyles);\n\n    if (this._namespacingIsEnabled()) {\n      podStyles = new ProcessStyles(podStyles, {\n        extensions: this.allowedStyleExtensions,\n        classicStyleDir: this.classicStyleDir,\n        terseClassNames: this.terseClassNames,\n        annotation: 'Filter (ember-component-css process :--component with class names)'\n      });\n    }\n\n    var styleManifest = new StyleManifest(podStyles, {\n      outputFileNameWithoutExtension: 'pod-styles',\n      annotation: 'StyleManifest (ember-component-css combining all style files that there are extensions for)'\n    });\n\n    tree = new Merge([podStyles, styleManifest, tree].filter(Boolean), {\n      annotation: 'Merge (ember-component-css merge namespacedStyles with style manafest)'\n    });\n\n    return tree;\n  },\n\n  name: 'ember-component-css'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/node_modules/ember-component-css/lib/pod-style.js":"/* eslint-env node */\n'use strict';\n\nvar Filter = require('broccoli-persistent-filter');\nvar componentNames = require('./component-names.js');\nvar processStratagies = require('./preprocess-class-names');\nvar path = require('path');\n\nmodule.exports = PodStyles;\n\nPodStyles.prototype = Object.create(Filter.prototype);\nPodStyles.prototype.constructor = PodStyles;\nfunction PodStyles(inputTree, options) {\n  options = options || {};\n  Filter.call(this, inputTree, {\n    annotation: options.annotation\n  });\n  this.extensions = options.extensions;\n  this.classicStyleDir = options.classicStyleDir;\n  this.terseClassNames = options.terseClassNames;\n}\n\nPodStyles.prototype.processString = function(contents, stylePath) {\n  var extension = path.extname(stylePath),\n      className = componentNames.class(stylePath, this.classicStyleDir, this.terseClassNames),\n      strategy = 'default';\n\n  switch (extension) {\n    case '.styl':\n    case '.sass':\n      strategy = 'indentation';\n      break;\n    case '.less':\n    case '.scss':\n      strategy = 'syntax';\n      break;\n  }\n\n  return processStratagies[strategy](contents, className, extension);\n};\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/node_modules/ember-component-css/lib/component-names.js":"/* eslint-env node */\n'use strict';\n\nvar md5 = require('md5');\n\nmodule.exports = {\n  path: function(actualPath, classicStyleDir) {\n    var terminator = '/';\n    var pathSegementToRemove = 'components/';\n\n    if (actualPath.includes(classicStyleDir)) {\n      terminator = '.';\n      pathSegementToRemove = 'styles/' + classicStyleDir + '/';\n    }\n\n    return actualPath.substr(0, actualPath.lastIndexOf(terminator)).replace(pathSegementToRemove, '');\n  },\n\n  class: function(modifiedPath, classicStyleDir, terseClassNames) {\n    var seperator = '__';\n    var componentPath = this.path(modifiedPath, classicStyleDir);\n    var className = seperator + md5(componentPath).slice(-5);\n\n    if (!terseClassNames) {\n      className = seperator + componentPath.replace(/\\//g, seperator) + className;\n    }\n\n    return className;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/node_modules/ember-component-css/lib/preprocess-class-names.js":"/* eslint-env node */\n'use strict';\n\nvar postcss = require('postcss');\nvar postcssSelectorNamespace = require('postcss-selector-namespace')\nvar os = require('os');\nvar supportedExtensions = {\n  \".scss\": require('postcss-scss'),\n  \".less\": require('postcss-less')\n};\n\nfunction namespaceSelectors(className) {\n  return postcssSelectorNamespace({\n    selfSelector: /&|:--component/,\n    namespace: '.' + className,\n    ignoreRoot: false\n  });\n}\n\nmodule.exports = {\n  indentation: function(contents, className) {\n    contents = contents.replace(/:--component/g, '&');\n    contents = '.' + className + os.EOL + contents;\n\n    // Indent styles for scoping and make sure it ends with a\n    // newline that is not indented\n    return contents.replace(new RegExp(os.EOL, 'g'), os.EOL + '  ') + os.EOL;\n  },\n\n  wrap: function(contents, className) {\n    // Replace instances of :--component with '&'\n    contents = contents.replace(/:--component/g, '&');\n\n    // Wrap the styles inside the generated class\n    return '.' + className + '{' + contents + '}';\n  },\n\n  syntax: function(contents, className, extension) {\n    return postcss().use(namespaceSelectors(className))\n      .process(contents, {\n        syntax: supportedExtensions[extension]\n      }).css;\n  },\n\n  default: function(contents, className) {\n    return postcss().use(namespaceSelectors(className)).process(contents).css;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/node_modules/ember-component-css/lib/pod-names.js":"/* eslint-env node */\n'use strict';\n\nvar Plugin = require('broccoli-plugin');\nvar walkSync = require('walk-sync');\nvar fs = require('fs');\nvar FSTree = require('fs-tree-diff');\nvar Promise = require('rsvp').Promise;\nvar path = require('path');\nvar componentNames = require('./component-names.js');\n\nmodule.exports = PodNames;\n\nPodNames.prototype = Object.create(Plugin.prototype);\nPodNames.prototype.constructor = PodNames;\nfunction PodNames(inputNode, options) {\n  options = options || {};\n  Plugin.call(this, [inputNode], {\n    annotation: options.annotation,\n    persistentOutput: true\n  });\n\n  this.currentTree = new FSTree();\n  this.podNameJson = {};\n  this.classicStyleDir = options.classicStyleDir;\n  this.terseClassNames = options.terseClassNames;\n}\n\nPodNames.prototype.build = function() {\n  var srcDir = this.inputPaths[0];\n\n  var entries = walkSync.entries(srcDir);\n  var nextTree = new FSTree.fromEntries(entries, { sortAndExpand: true });\n  var currentTree = this.currentTree;\n\n  this.currentTree = nextTree;\n  var patches = currentTree.calculatePatch(nextTree);\n\n  return Promise.resolve().then(this.writePodStyleName.bind(this, patches));\n};\n\nPodNames.prototype.writePodStyleName = function(patches) {\n  for (var i = 0; i < patches.length; i++) {\n    switch (patches[i][0]) {\n      case 'create':\n        this.addClass(patches[i][1]);\n        break;\n      case 'unlink':\n        this.removeClass(patches[i][1]);\n        break;\n    }\n  }\n\n  var output = 'export default ' + JSON.stringify(this.podNameJson);\n  return fs.writeFileSync(path.join(this.outputPath, 'pod-names.js'), output);\n}\n\nPodNames.prototype.addClass = function(stylePath) {\n  var componentPath = componentNames.path(stylePath, this.classicStyleDir),\n      componentClass = componentNames.class(stylePath, this.classicStyleDir, this.terseClassNames);\n  this.podNameJson[componentPath] = componentClass;\n}\n\nPodNames.prototype.removeClass = function(stylePath) {\n  var componentPath = componentNames.path(stylePath, this.classicStyleDir);\n  delete this.podNameJson[componentPath];\n}\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/node_modules/ember-component-css/addon/pod-names.js":"export default {};\n","/home/travis/build/npmtest/node-npmtest-ember-component-css/node_modules/ember-component-css/config/environment.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n"}